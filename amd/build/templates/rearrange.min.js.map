{"version":3,"file":"rearrange.min.js","sources":["../../src/templates/rearrange.js"],"sourcesContent":["\nimport $ from 'jquery';\nimport * as jqui from 'jqueryui';\nimport * as Service from 'block_coupon/templates/service';\n\nclass Rearrange {\n    constructor(templateid, page, elements) {\n        this.templateid = templateid;\n        this.page = page;\n        this.elements = elements;\n\n        // Set the PDF dimensions.\n        this.setPdfDimensions();\n\n        // Set the boundaries.\n        this.setBoundaries();\n        this.setpositions();\n        this.createevents();\n\n        window.addEventListener(\"resize\", this.checkWindownResize.bind(this));\n    }\n\n    /**\n     * The template id.\n     */\n    templateid = 0;\n\n    /**\n     * The page we are displaying.\n     */\n    page = [];\n\n    /**\n     * The custom certificate elements to display.\n     */\n    elements = [];\n\n    /**\n     * Store the X coordinates of the top left of the pdf div.\n     */\n    pdfx = 0;\n\n    /**\n     * Store the Y coordinates of the top left of the pdf div.\n     */\n    pdfy = 0;\n\n    /**\n     * Store the width of the pdf div.\n     */\n    pdfwidth = 0;\n\n    /**\n     * Store the height of the pdf div.\n     */\n    pdfheight = 0;\n\n    /**\n     * Store the location of the element before we move.\n     */\n    elementxy = 0;\n\n    /**\n     * Store the left boundary of the pdf div.\n     */\n    pdfleftboundary = 0;\n\n    /**\n     * Store the right boundary of the pdf div.\n     */\n    pdfrightboundary = 0;\n\n    /**\n     * The number of pixels in a mm.\n     */\n    pixelsinmm = 3.779527559055; // 3.779528.\n\n    /**\n     * Sets the current position of the elements.\n     */\n    setpositions() {\n        // Go through the elements and set their positions.\n        for (var key in this.elements) {\n            var element = this.elements[key];\n            var el = document.querySelector('#element-' + element.id);\n            if (el === undefined || el === null) {\n                continue;\n            }\n            var posx = this.pdfx + element.posx * this.pixelsinmm;\n            var posy = this.pdfy + element.posy * this.pixelsinmm;\n            var cr = el.getBoundingClientRect();\n            var nodewidth = cr.width;\n            var maxwidth = element.width * this.pixelsinmm;\n\n            if (maxwidth && (nodewidth > maxwidth)) {\n                nodewidth = maxwidth;\n            }\n\n            switch (element.refpoint) {\n                case '1': // Top-center.\n                    posx -= nodewidth / 2;\n                    break;\n                case '2': // Top-right.\n                    posx = posx - nodewidth + 2;\n                    break;\n            }\n\n            $('#element-' + element.id).offset({left: posx, top: posy});\n        }\n    }\n\n    /**\n     * Sets the PDF dimensions.\n     */\n    setPdfDimensions() {\n        const el = document.querySelector('#pdf');\n        const cr = el.getBoundingClientRect();\n        const offset = $(el).offset();\n        this.pdfx = offset.left;\n        this.pdfy = offset.top;\n        this.pdfwidth = parseFloat(cr.width);\n        this.pdfheight = parseFloat(cr.height);\n    }\n\n    /**\n     * Sets the boundaries.\n     */\n    setBoundaries() {\n        this.pdfleftboundary = this.pdfx;\n        if (this.page.leftmargin) {\n            this.pdfleftboundary += parseInt(this.page.leftmargin * this.pixelsinmm, 10);\n        }\n\n        this.pdfrightboundary = this.pdfx + this.pdfwidth;\n        if (this.page.rightmargin) {\n            this.pdfrightboundary -= parseInt(this.page.rightmargin * this.pixelsinmm, 10);\n        }\n    }\n\n    /**\n     * Check browser resize and reset position.\n     */\n    checkWindownResize() {\n        this.setPdfDimensions();\n        this.setBoundaries();\n        this.setpositions();\n    }\n\n    /**\n     * Creates the JS events for changing element positions.\n     */\n    createevents() {\n        // For now we won't do realtime updates (service calls).\n        const instantupdate = true;\n        // Trigger a save event when save button is pushed.\n        $('.savepositionsbtn [type=submit]').on('click', function(e) {\n            e.preventDefault();\n            this.savepositions(e).then(function() {\n                var formnode = e.currentTarget.closest('form');\n                var baseurl = formnode.getAttribute('action');\n                var pageinput = formnode.querySelector('[name=pid]');\n                if (pageinput) {\n                    var pageid = pageinput.value;\n                    window.location = baseurl + '?pid=' + pageid;\n                } else {\n                    var templateid = formnode.querySelector('[name=tid]').value;\n                    window.location = baseurl + '?tid=' + templateid;\n                }\n            });\n        }.bind(this));\n\n        // Trigger a save event when apply button is pushed.\n        $('.applypositionsbtn [type=submit]').on('click', function(e) {\n            e.preventDefault();\n            this.savepositions(e);\n        }.bind(this));\n\n        // Drag-drop.\n        var selector = '#pdf .element';\n        var pixelsinmm = this.pixelsinmm;\n\n        var target = $(selector);\n        target.draggable({\n                    // Snap to elements only if Shift is not held.\n                    //snap: e.shiftKey ? false : '.snapdraggable',\n                    snap: false,\n                    snapMode: 'inner',\n                    snapTolerance: 10,\n                    // Set containment so it can't be moved far away from the page outlines.\n//                    containment: [\n//                        page.offset().left - el.width(),\n//                        page.offset().top - el.height(),\n//                        page.offset().left + page.width(),\n//                        page.offset().top + page.height()\n//                    ],\n                    containment: $('#pdf')\n                });\n        target.on('dragstart', function(e) {\n                $(e.currentTarget).addClass('isdragged');\n            })\n            .on('dragstop', function(e) {\n                var el = $(e.currentTarget),\n                    page = el.closest('#pdf'),\n                    refpoint = parseInt($(this).data('refpoint')),\n                    offset = refpoint ? parseInt($(this).width()) * refpoint / 2 : 0,\n                    left = (el.offset().left - page.offset().left + offset) / pixelsinmm,\n                    top = (el.offset().top - page.offset().top) / pixelsinmm;\n                setTimeout(function() {\n                    el.removeClass('isdragged');\n                }, 100);\n\n                if (instantupdate) {\n                    Service.updateElementPositions(\n                        page.data('templateid'),\n                        [{id: el.data('id'), posx: Math.round(parseFloat(left)), posy: Math.round(parseFloat(top))}]\n                    );\n                }\n            });\n    }\n\n    /**\n     * Returns true if any part of the element is placed outside of the PDF div, false otherwise.\n     *\n     * @param {Element} el\n     * @returns {boolean}\n     */\n    isoutofbounds(el) {\n        // Get the width and height of the node.\n        var cr = el.getBoundingClientRect();\n        var offset = $(el).offset();\n        var nodewidth = parseFloat(cr.width);\n        var nodeheight = parseFloat(cr.height);\n\n        // Store the positions of each edge of the node.\n        var left = offset.left;\n        var right = left + nodewidth;\n        var top = offset.top;\n        var bottom = top + nodeheight;\n\n        const pdf = document.querySelector('#pdf');\n        const poffset = $(pdf).offset();\n        this.pdfx = poffset.left;\n        this.pdfy = poffset.top;\n\n        // Check if it is out of bounds horizontally.\n        if ((left < this.pdfleftboundary) || (right > this.pdfrightboundary)) {\n            return true;\n        }\n\n        // Check if it is out of bounds vertically.\n        if ((top < this.pdfy) || (bottom > (this.pdfy + this.pdfheight))) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Perform an AJAX call and save the positions of the elements.\n     *\n     * @param {Event} e\n     */\n    savepositions(e) {\n        // The parameters to send the AJAX call.\n        var values = [];\n\n        const offset = $('#pdf').offset();\n        this.pdfx = offset.left;\n        this.pdfy = offset.top;\n\n        // Go through the elements and save their positions.\n        for (var key in this.elements) {\n            var element = this.elements[key];\n            var el = $('#element-' + element.id);\n            if (el.length === 0) {\n                continue;\n            }\n            var eloffset = el.offset();\n\n            // Get the current X and Y positions and refpoint for this element.\n            var posx = eloffset.left - this.pdfx;\n            var posy = eloffset.top - this.pdfy;\n            var refpoint = el.data('refpoint');\n\n            var nodewidth = parseFloat(el.width());\n\n            switch (refpoint) {\n                case '1': // Top-center.\n                    posx += nodewidth / 2;\n                    break;\n                case '2': // Top-right.\n                    posx += nodewidth;\n                    break;\n            }\n\n            // Set the parameters to pass to the AJAX request.\n            values.push({\n                id: element.id,\n                posx: Math.round(parseFloat(posx / this.pixelsinmm)),\n                posy: Math.round(parseFloat(posy / this.pixelsinmm))\n            });\n        }\n\n        Service.updateElementPositions(this.templateid, values);\n    }\n\n}\n\nexport default {\n    init: function(templateid, page, elements) {\n        new Rearrange(templateid, page, elements);\n    }\n};\n"],"names":["Rearrange","constructor","templateid","page","elements","setPdfDimensions","setBoundaries","setpositions","createevents","window","addEventListener","this","checkWindownResize","bind","key","element","el","document","querySelector","id","posx","pdfx","pixelsinmm","posy","pdfy","nodewidth","getBoundingClientRect","width","maxwidth","refpoint","offset","left","top","cr","pdfwidth","parseFloat","pdfheight","height","pdfleftboundary","leftmargin","parseInt","pdfrightboundary","rightmargin","on","e","preventDefault","savepositions","then","formnode","currentTarget","closest","baseurl","getAttribute","pageinput","pageid","value","location","target","draggable","snap","snapMode","snapTolerance","containment","addClass","data","setTimeout","removeClass","Service","updateElementPositions","Math","round","isoutofbounds","nodeheight","right","bottom","pdf","poffset","values","length","eloffset","push","init"],"mappings":"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"}