{"version":3,"file":"bulkactions.min.js","sources":["../../src/coupons/bulkactions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport $ from 'jquery';\nimport * as Notification from 'core/notification';\nimport * as Str from 'core/str';\nimport {add as addToast} from 'core/toast';\nimport {Service} from 'block_coupon/coupons/service';\nimport * as DynamicTable from 'core_table/dynamic';\nimport ModalForm from 'core_form/modalform';\n\nconst SELECTORS = {\n    checkbox: '[data-action=\"bulk\"]',\n    bulkactionselect: '[data-type=\"bulkaction\"]',\n    bulkcounter: '#bulk-counter',\n    bulkactions: {\n        container: '[data-region=\"bulkactions\"]',\n        \"delete\": '[data-action=\"bulkdelete\"]',\n        editcourses: '[data-action=\"editcourses\"]',\n        editcohorts: '[data-action=\"editcohorts\"]',\n    }\n};\n\nconst enableBulkActions = (enable) => {\n    if (enable) {\n        document.querySelector(SELECTORS.bulkactionselect).removeAttribute('disabled');\n    } else {\n        document.querySelector(SELECTORS.bulkactionselect).setAttribute('disabled', 'disabled');\n    }\n};\n\nconst handleCheckboxChange = () => {\n    // Initialize dropdown state.\n    let size = $(`${SELECTORS.checkbox}:checked`).length;\n    $(SELECTORS.bulkcounter).html(`${size}`);\n    enableBulkActions(size > 0);\n    if (size > 0) {\n        // Enable/disable cohort/course types.\n        let types = getSelectedTypes();\n        document.querySelector(`${SELECTORS.bulkactions.container} ${SELECTORS.bulkactions.editcourses}`).classList.remove('hidden');\n        document.querySelector(`${SELECTORS.bulkactions.container} ${SELECTORS.bulkactions.editcohorts}`).classList.add('hidden');\n\n        if (types.length > 1) {\n            // Multiple types: disable all.\n            document.querySelector(`${SELECTORS.bulkactions.container} ${SELECTORS.bulkactions.editcourses}`).classList.add('hidden');\n            document.querySelector(`${SELECTORS.bulkactions.container} ${SELECTORS.bulkactions.editcohorts}`).classList.add('hidden');\n        } else {\n            let typ = types[0];\n            if (typ === 'cohort') {\n                // Enable cohort type.\n                document.querySelector(`${SELECTORS.bulkactions.container} ${SELECTORS.bulkactions.editcohorts}`).classList.remove('hidden');\n            }\n            if (typ === 'course') {\n                // Enable course type.\n                document.querySelector(`${SELECTORS.bulkactions.container} ${SELECTORS.bulkactions.editcourses}`).classList.remove('hidden');\n            }\n        }\n    }\n};\n\nconst getSelectedIds = () => {\n    let boxes = $(`${SELECTORS.checkbox}:checked`);\n    let ids = [];\n    boxes.each((idx, el) => {\n        ids.push(el.dataset.id);\n    });\n    return ids;\n};\n\nconst getSelectedTypes = () => {\n    let boxes = $(`${SELECTORS.checkbox}:checked`);\n    let typs = [];\n    boxes.each((idx, el) => {\n        typs.push(el.dataset.typ);\n    });\n    return Array.from(new Set(typs));\n};\n\nconst checkTypes = async() => {\n    let rs = getSelectedTypes();\n    if (rs.length > 1) {\n        let args = await Str.get_strings([\n            {key: 'err:bulkaction:typ:diff:title', component: 'block_coupon'},\n            {key: 'err:bulkaction:typ:diff:msg', component: 'block_coupon'},\n            {key: 'ok'},\n        ]);\n        Notification.alert(...args);\n        return false;\n    } else {\n        return true;\n    }\n};\n\nconst bulkDelete = async(e) => {\n    let rs = await checkTypes();\n    if (rs) {\n        // Display confirmation box.\n        e.preventDefault();\n        const templateId = $(e.currentTarget).attr('data-id');\n        Str.get_strings([\n            {key: 'confirm', component: 'moodle'},\n            {key: 'deletecouponsconfirm', component: 'block_coupon'},\n            {key: 'deletecoupons', component: 'block_coupon'},\n            {key: 'cancel', component: 'moodle'}\n        ]).done(function(s) {\n            Notification.confirm(s[0], s[1], s[2], s[3], async () => {\n                let ids = getSelectedIds();\n                let rs = await Service.deleteCoupons(ids);\n                if (rs.result) {\n                    addToast(rs.msg, {type: 'success'});\n                    // Sleep 3/4 sec before reloading page.\n                    setTimeout(() => {window.location.reload();}, 750);\n                } else {\n                    addToast(rs.msg, {type: 'error'});\n                }\n            });\n        }).fail(Notification.exception);\n    }\n};\n\nconst bulkEditCourses = async(e) => {\n    let rs = await checkTypes();\n    if (rs) {\n        console.log(`bulk editcourses ${getSelectedIds()}`);\n        // Display dynamic form.\n        e.preventDefault();\n\n        let mfArgs = {};\n        if (e.currentTarget.dataset.jArgs !== undefined) {\n            let jArgs = e.currentTarget.dataset.jArgs;\n            if (typeof jArgs === 'string') {\n                jArgs = JSON.parse(jArgs);\n            }\n            for (const [key, value] of Object.entries(jArgs)) {\n                mfArgs[key] = value;\n            }\n        }\n\n        mfArgs.id = getSelectedIds();\n\n        const modalForm = new ModalForm({\n            formClass: 'block_coupon\\\\forms\\\\dynamic\\\\editcourses',\n            modalConfig: {title: Str.get_string('editcourses', 'block_coupon')},\n            args: mfArgs,\n            returnFocus: e.target\n        });\n\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => window.location.reload());\n        modalForm.show();\n    }\n};\n\nconst bulkEditCohorts = async(e) => {\n    let rs = await checkTypes();\n    if (rs) {\n        console.log(`bulk editcohorts ${getSelectedIds()}`);\n        // Display dynamic form.\n        e.preventDefault();\n\n        let mfArgs = {};\n        if (e.currentTarget.dataset.jArgs !== undefined) {\n            let jArgs = e.currentTarget.dataset.jArgs;\n            if (typeof jArgs === 'string') {\n                jArgs = JSON.parse(jArgs);\n            }\n            for (const [key, value] of Object.entries(jArgs)) {\n                mfArgs[key] = value;\n            }\n        }\n\n        mfArgs.id = getSelectedIds();\n\n        const modalForm = new ModalForm({\n            formClass: 'block_coupon\\\\forms\\\\dynamic\\\\editcohorts',\n            modalConfig: {title: Str.get_string('editcohorts', 'block_coupon')},\n            args: mfArgs,\n            returnFocus: e.target\n        });\n\n        // When table ID not provided, detect.\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => window.location.reload());\n        modalForm.show();\n    }\n};\n\nconst initBulkActions = () => {\n    // Initialize dropdown state.\n    enableBulkActions($(`${SELECTORS.checkbox}:checked`).length > 0);\n    // Initialize checkbox state changes.\n    $(SELECTORS.checkbox).on('change', handleCheckboxChange);\n    // Initialize bulk actions.\n    $(SELECTORS.bulkactions.container).on('click', SELECTORS.bulkactions.delete, bulkDelete);\n    $(SELECTORS.bulkactions.container).on('click', SELECTORS.bulkactions.editcourses, bulkEditCourses);\n    $(SELECTORS.bulkactions.container).on('click', SELECTORS.bulkactions.editcohorts, bulkEditCohorts);\n\n};\n\nexport const init = () => {\n    initBulkActions();\n};\n"],"names":["SELECTORS","container","editcourses","editcohorts","enableBulkActions","enable","document","querySelector","removeAttribute","setAttribute","handleCheckboxChange","size","length","html","types","getSelectedTypes","classList","remove","add","typ","getSelectedIds","boxes","ids","each","idx","el","push","dataset","id","typs","Array","from","Set","checkTypes","async","args","Str","get_strings","key","component","Notification","alert","bulkDelete","e","preventDefault","currentTarget","attr","done","s","confirm","rs","Service","deleteCoupons","result","msg","type","setTimeout","window","location","reload","fail","exception","bulkEditCourses","console","log","mfArgs","undefined","jArgs","JSON","parse","value","Object","entries","modalForm","ModalForm","formClass","modalConfig","title","get_string","returnFocus","target","addEventListener","events","FORM_SUBMITTED","show","bulkEditCohorts","on","delete"],"mappings":"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"}